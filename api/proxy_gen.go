// Code generated by github.com/filecoin-project/venus-market/tools/api_gen. DO NOT EDIT.

package api

import (
	"context"
	"github.com/filecoin-project/go-address"
	datatransfer "github.com/filecoin-project/go-data-transfer"
	"github.com/filecoin-project/go-fil-markets/piecestore"
	"github.com/filecoin-project/go-fil-markets/retrievalmarket"
	"github.com/filecoin-project/go-fil-markets/storagemarket"
	"github.com/filecoin-project/go-state-types/abi"
	"github.com/filecoin-project/specs-actors/actors/builtin/paych"
	"github.com/filecoin-project/venus-market/client"
	"github.com/filecoin-project/venus-market/imports"
	"github.com/filecoin-project/venus-market/types"
	mTypes "github.com/filecoin-project/venus-messager/types"
	"github.com/filecoin-project/venus/app/submodule/apitypes"
	vTypes "github.com/filecoin-project/venus/pkg/types"
	"github.com/ipfs-force-community/venus-gateway/marketevent"
	types2 "github.com/ipfs-force-community/venus-gateway/types"
	"github.com/ipfs/go-cid"
	"github.com/libp2p/go-libp2p-core/peer"
	"golang.org/x/xerrors"
	"time"
)

type MarketClientNodeStruct struct {
	Internal struct {
		ClientCalcCommP func(p0 context.Context, p1 string) (*client.CommPRet, error) `perm:"write"`

		ClientCancelDataTransfer func(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error `perm:"write"`

		ClientCancelRetrievalDeal func(p0 context.Context, p1 retrievalmarket.DealID) error `perm:"write"`

		ClientDataTransferUpdates func(p0 context.Context) (<-chan types.DataTransferChannel, error) `perm:"write"`

		ClientDealPieceCID func(p0 context.Context, p1 cid.Cid) (client.DataCIDSize, error) `perm:"read"`

		ClientDealSize func(p0 context.Context, p1 cid.Cid) (client.DataSize, error) `perm:"read"`

		ClientExport func(p0 context.Context, p1 client.ExportRef, p2 client.FileRef) error `perm:"admin"`

		ClientFindData func(p0 context.Context, p1 cid.Cid, p2 *cid.Cid) ([]client.QueryOffer, error) `perm:"read"`

		ClientGenCar func(p0 context.Context, p1 client.FileRef, p2 string) error `perm:"write"`

		ClientGetDealInfo func(p0 context.Context, p1 cid.Cid) (*client.DealInfo, error) `perm:"read"`

		ClientGetDealStatus func(p0 context.Context, p1 uint64) (string, error) `perm:"read"`

		ClientGetDealUpdates func(p0 context.Context) (<-chan client.DealInfo, error) `perm:"write"`

		ClientGetRetrievalUpdates func(p0 context.Context) (<-chan client.RetrievalInfo, error) `perm:"write"`

		ClientHasLocal func(p0 context.Context, p1 cid.Cid) (bool, error) `perm:"write"`

		ClientImport func(p0 context.Context, p1 client.FileRef) (*client.ImportRes, error) `perm:"admin"`

		ClientListDataTransfers func(p0 context.Context) ([]types.DataTransferChannel, error) `perm:"write"`

		ClientListDeals func(p0 context.Context) ([]client.DealInfo, error) `perm:"write"`

		ClientListImports func(p0 context.Context) ([]client.Import, error) `perm:"write"`

		ClientListRetrievals func(p0 context.Context) ([]client.RetrievalInfo, error) `perm:"write"`

		ClientMinerQueryOffer func(p0 context.Context, p1 address.Address, p2 cid.Cid, p3 *cid.Cid) (client.QueryOffer, error) `perm:"read"`

		ClientQueryAsk func(p0 context.Context, p1 peer.ID, p2 address.Address) (*storagemarket.StorageAsk, error) `perm:"read"`

		ClientRemoveImport func(p0 context.Context, p1 imports.ID) error `perm:"admin"`

		ClientRestartDataTransfer func(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error `perm:"write"`

		ClientRetrieve func(p0 context.Context, p1 client.RetrievalOrder) (*client.RestrievalRes, error) `perm:"admin"`

		ClientRetrieveTryRestartInsufficientFunds func(p0 context.Context, p1 address.Address) error `perm:"write"`

		ClientRetrieveWait func(p0 context.Context, p1 retrievalmarket.DealID) error `perm:"admin"`

		ClientStartDeal func(p0 context.Context, p1 *client.StartDealParams) (*cid.Cid, error) `perm:"admin"`

		ClientStatelessDeal func(p0 context.Context, p1 *client.StartDealParams) (*cid.Cid, error) `perm:"write"`

		DefaultAddress func(p0 context.Context) (address.Address, error) `perm:"read"`

		MarketAddBalance func(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) `perm:"write"`

		MarketGetReserved func(p0 context.Context, p1 address.Address) (vTypes.BigInt, error) `perm:"read"`

		MarketReleaseFunds func(p0 context.Context, p1 address.Address, p2 vTypes.BigInt) error `perm:"write"`

		MarketReserveFunds func(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) `perm:"write"`

		MarketWithdraw func(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) `perm:"write"`

		MessagerGetMessage func(p0 context.Context, p1 cid.Cid) (*vTypes.Message, error) `perm:"read"`

		MessagerPushMessage func(p0 context.Context, p1 *vTypes.Message, p2 *mTypes.MsgMeta) (cid.Cid, error) `perm:"write"`

		MessagerWaitMessage func(p0 context.Context, p1 cid.Cid) (*apitypes.MsgLookup, error) `perm:"read"`
	}
}

type MarketClientNodeStub struct {
}

type MarketFullNodeStruct struct {
	Internal struct {
		ActorExist func(p0 context.Context, p1 address.Address) (bool, error) `perm:"read"`

		ActorList func(p0 context.Context) ([]types.User, error) `perm:"read"`

		ActorSectorSize func(p0 context.Context, p1 address.Address) (abi.SectorSize, error) `perm:"read"`

		AssignUnPackedDeals func(p0 context.Context, p1 address.Address, p2 abi.SectorSize, p3 *types.GetDealSpec) ([]*types.DealInfoIncludePath, error) `perm:"write"`

		DagstoreGC func(p0 context.Context) ([]types.DagstoreShardResult, error) `perm:"admin"`

		DagstoreInitializeAll func(p0 context.Context, p1 types.DagstoreInitializeAllParams) (<-chan types.DagstoreInitializeAllEvent, error) `perm:"write"`

		DagstoreInitializeShard func(p0 context.Context, p1 string) error `perm:"write"`

		DagstoreListShards func(p0 context.Context) ([]types.DagstoreShardInfo, error) `perm:"read"`

		DagstoreRecoverShard func(p0 context.Context, p1 string) error `perm:"write"`

		DealsConsiderOfflineRetrievalDeals func(p0 context.Context) (bool, error) `perm:"admin"`

		DealsConsiderOfflineStorageDeals func(p0 context.Context) (bool, error) `perm:"admin"`

		DealsConsiderOnlineRetrievalDeals func(p0 context.Context) (bool, error) `perm:"admin"`

		DealsConsiderOnlineStorageDeals func(p0 context.Context) (bool, error) `perm:"admin"`

		DealsConsiderUnverifiedStorageDeals func(p0 context.Context) (bool, error) `perm:"admin"`

		DealsConsiderVerifiedStorageDeals func(p0 context.Context) (bool, error) `perm:"admin"`

		DealsImportData func(p0 context.Context, p1 cid.Cid, p2 string) error `perm:"admin"`

		DealsPieceCidBlocklist func(p0 context.Context) ([]cid.Cid, error) `perm:"admin"`

		DealsSetConsiderOfflineRetrievalDeals func(p0 context.Context, p1 bool) error `perm:"admin"`

		DealsSetConsiderOfflineStorageDeals func(p0 context.Context, p1 bool) error `perm:"admin"`

		DealsSetConsiderOnlineRetrievalDeals func(p0 context.Context, p1 bool) error `perm:"admin"`

		DealsSetConsiderOnlineStorageDeals func(p0 context.Context, p1 bool) error `perm:"admin"`

		DealsSetConsiderUnverifiedStorageDeals func(p0 context.Context, p1 bool) error `perm:"admin"`

		DealsSetConsiderVerifiedStorageDeals func(p0 context.Context, p1 bool) error `perm:"admin"`

		DealsSetPieceCidBlocklist func(p0 context.Context, p1 []cid.Cid) error `perm:"admin"`

		GetDeals func(p0 context.Context, p1 address.Address, p2 int, p3 int) ([]*types.DealInfo, error) `perm:"read"`

		GetReadUrl func(p0 context.Context, p1 string) (string, error) ``

		GetUnPackedDeals func(p0 context.Context, p1 address.Address, p2 *types.GetDealSpec) ([]*types.DealInfoIncludePath, error) `perm:"read"`

		GetWriteUrl func(p0 context.Context, p1 string) (string, error) ``

		ID func(p0 context.Context) (peer.ID, error) `perm:"read"`

		ListenMarketEvent func(p0 context.Context, p1 *marketevent.MarketRegisterPolicy) (<-chan *types2.RequestEvent, error) `perm:"read"`

		MarkDealsAsPacking func(p0 context.Context, p1 address.Address, p2 []abi.DealID) error `perm:"write"`

		MarketAddBalance func(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) `perm:"sign"`

		MarketCancelDataTransfer func(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error `perm:"write"`

		MarketDataTransferUpdates func(p0 context.Context) (<-chan types.DataTransferChannel, error) `perm:"write"`

		MarketGetAsk func(p0 context.Context, p1 address.Address) (*storagemarket.SignedStorageAsk, error) `perm:"read"`

		MarketGetDealUpdates func(p0 context.Context) (<-chan storagemarket.MinerDeal, error) `perm:"read"`

		MarketGetReserved func(p0 context.Context, p1 address.Address) (vTypes.BigInt, error) `perm:"sign"`

		MarketGetRetrievalAsk func(p0 context.Context, p1 address.Address) (*retrievalmarket.Ask, error) `perm:"read"`

		MarketImportDealData func(p0 context.Context, p1 cid.Cid, p2 string) error `perm:"write"`

		MarketListAsk func(p0 context.Context) ([]*storagemarket.SignedStorageAsk, error) `perm:"read"`

		MarketListDataTransfers func(p0 context.Context) ([]types.DataTransferChannel, error) `perm:"write"`

		MarketListDeals func(p0 context.Context, p1 []address.Address) ([]types.MarketDeal, error) `perm:"read"`

		MarketListIncompleteDeals func(p0 context.Context, p1 address.Address) ([]storagemarket.MinerDeal, error) `perm:"read"`

		MarketListRetrievalAsk func(p0 context.Context) ([]*types.RetrievalAsk, error) `perm:"read"`

		MarketListRetrievalDeals func(p0 context.Context, p1 address.Address) ([]types.ProviderDealState, error) `perm:"read"`

		MarketPendingDeals func(p0 context.Context) ([]types.PendingDealInfo, error) `perm:"write"`

		MarketPublishPendingDeals func(p0 context.Context) error `perm:"admin"`

		MarketReleaseFunds func(p0 context.Context, p1 address.Address, p2 vTypes.BigInt) error `perm:"sign"`

		MarketReserveFunds func(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) `perm:"sign"`

		MarketRestartDataTransfer func(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error `perm:"write"`

		MarketSetAsk func(p0 context.Context, p1 address.Address, p2 vTypes.BigInt, p3 vTypes.BigInt, p4 abi.ChainEpoch, p5 abi.PaddedPieceSize, p6 abi.PaddedPieceSize) error `perm:"admin"`

		MarketSetRetrievalAsk func(p0 context.Context, p1 address.Address, p2 *retrievalmarket.Ask) error `perm:"admin"`

		MarketWithdraw func(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) `perm:"sign"`

		MessagerGetMessage func(p0 context.Context, p1 cid.Cid) (*vTypes.Message, error) `perm:"read"`

		MessagerPushMessage func(p0 context.Context, p1 *vTypes.Message, p2 *mTypes.MsgMeta) (cid.Cid, error) `perm:"write"`

		MessagerWaitMessage func(p0 context.Context, p1 cid.Cid) (*apitypes.MsgLookup, error) `perm:"read"`

		NetAddrsListen func(p0 context.Context) (peer.AddrInfo, error) `perm:"read"`

		PaychVoucherList func(p0 context.Context, p1 address.Address) ([]*paych.SignedVoucher, error) `perm:"read"`

		PiecesGetCIDInfo func(p0 context.Context, p1 cid.Cid) (*piecestore.CIDInfo, error) `perm:"read"`

		PiecesGetPieceInfo func(p0 context.Context, p1 cid.Cid) (*piecestore.PieceInfo, error) `perm:"read"`

		PiecesListCidInfos func(p0 context.Context) ([]cid.Cid, error) `perm:"read"`

		PiecesListPieces func(p0 context.Context) ([]cid.Cid, error) `perm:"read"`

		ResponseMarketEvent func(p0 context.Context, p1 *types2.ResponseEvent) error `perm:"read"`

		SectorGetSealDelay func(p0 context.Context) (time.Duration, error) `perm:"read"`

		SectorSetExpectedSealDuration func(p0 context.Context, p1 time.Duration) error `perm:"write"`

		UpdateDealOnPacking func(p0 context.Context, p1 address.Address, p2 abi.DealID, p3 abi.SectorNumber, p4 abi.PaddedPieceSize) error `perm:"write"`

		UpdateDealStatus func(p0 context.Context, p1 address.Address, p2 abi.DealID, p3 string) error `perm:"write"`

		UpdateStorageDealStatus func(p0 context.Context, p1 cid.Cid, p2 storagemarket.StorageDealStatus) error `perm:"write"`
	}
}

type MarketFullNodeStub struct {
}

func (s *MarketClientNodeStruct) ClientCalcCommP(p0 context.Context, p1 string) (*client.CommPRet, error) {
	return s.Internal.ClientCalcCommP(p0, p1)
}

func (s *MarketClientNodeStub) ClientCalcCommP(p0 context.Context, p1 string) (*client.CommPRet, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientCancelDataTransfer(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error {
	return s.Internal.ClientCancelDataTransfer(p0, p1, p2, p3)
}

func (s *MarketClientNodeStub) ClientCancelDataTransfer(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientCancelRetrievalDeal(p0 context.Context, p1 retrievalmarket.DealID) error {
	return s.Internal.ClientCancelRetrievalDeal(p0, p1)
}

func (s *MarketClientNodeStub) ClientCancelRetrievalDeal(p0 context.Context, p1 retrievalmarket.DealID) error {
	return xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientDataTransferUpdates(p0 context.Context) (<-chan types.DataTransferChannel, error) {
	return s.Internal.ClientDataTransferUpdates(p0)
}

func (s *MarketClientNodeStub) ClientDataTransferUpdates(p0 context.Context) (<-chan types.DataTransferChannel, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientDealPieceCID(p0 context.Context, p1 cid.Cid) (client.DataCIDSize, error) {
	return s.Internal.ClientDealPieceCID(p0, p1)
}

func (s *MarketClientNodeStub) ClientDealPieceCID(p0 context.Context, p1 cid.Cid) (client.DataCIDSize, error) {
	return *new(client.DataCIDSize), xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientDealSize(p0 context.Context, p1 cid.Cid) (client.DataSize, error) {
	return s.Internal.ClientDealSize(p0, p1)
}

func (s *MarketClientNodeStub) ClientDealSize(p0 context.Context, p1 cid.Cid) (client.DataSize, error) {
	return *new(client.DataSize), xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientExport(p0 context.Context, p1 client.ExportRef, p2 client.FileRef) error {
	return s.Internal.ClientExport(p0, p1, p2)
}

func (s *MarketClientNodeStub) ClientExport(p0 context.Context, p1 client.ExportRef, p2 client.FileRef) error {
	return xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientFindData(p0 context.Context, p1 cid.Cid, p2 *cid.Cid) ([]client.QueryOffer, error) {
	return s.Internal.ClientFindData(p0, p1, p2)
}

func (s *MarketClientNodeStub) ClientFindData(p0 context.Context, p1 cid.Cid, p2 *cid.Cid) ([]client.QueryOffer, error) {
	return *new([]client.QueryOffer), xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientGenCar(p0 context.Context, p1 client.FileRef, p2 string) error {
	return s.Internal.ClientGenCar(p0, p1, p2)
}

func (s *MarketClientNodeStub) ClientGenCar(p0 context.Context, p1 client.FileRef, p2 string) error {
	return xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientGetDealInfo(p0 context.Context, p1 cid.Cid) (*client.DealInfo, error) {
	return s.Internal.ClientGetDealInfo(p0, p1)
}

func (s *MarketClientNodeStub) ClientGetDealInfo(p0 context.Context, p1 cid.Cid) (*client.DealInfo, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientGetDealStatus(p0 context.Context, p1 uint64) (string, error) {
	return s.Internal.ClientGetDealStatus(p0, p1)
}

func (s *MarketClientNodeStub) ClientGetDealStatus(p0 context.Context, p1 uint64) (string, error) {
	return "", xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientGetDealUpdates(p0 context.Context) (<-chan client.DealInfo, error) {
	return s.Internal.ClientGetDealUpdates(p0)
}

func (s *MarketClientNodeStub) ClientGetDealUpdates(p0 context.Context) (<-chan client.DealInfo, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientGetRetrievalUpdates(p0 context.Context) (<-chan client.RetrievalInfo, error) {
	return s.Internal.ClientGetRetrievalUpdates(p0)
}

func (s *MarketClientNodeStub) ClientGetRetrievalUpdates(p0 context.Context) (<-chan client.RetrievalInfo, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientHasLocal(p0 context.Context, p1 cid.Cid) (bool, error) {
	return s.Internal.ClientHasLocal(p0, p1)
}

func (s *MarketClientNodeStub) ClientHasLocal(p0 context.Context, p1 cid.Cid) (bool, error) {
	return false, xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientImport(p0 context.Context, p1 client.FileRef) (*client.ImportRes, error) {
	return s.Internal.ClientImport(p0, p1)
}

func (s *MarketClientNodeStub) ClientImport(p0 context.Context, p1 client.FileRef) (*client.ImportRes, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientListDataTransfers(p0 context.Context) ([]types.DataTransferChannel, error) {
	return s.Internal.ClientListDataTransfers(p0)
}

func (s *MarketClientNodeStub) ClientListDataTransfers(p0 context.Context) ([]types.DataTransferChannel, error) {
	return *new([]types.DataTransferChannel), xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientListDeals(p0 context.Context) ([]client.DealInfo, error) {
	return s.Internal.ClientListDeals(p0)
}

func (s *MarketClientNodeStub) ClientListDeals(p0 context.Context) ([]client.DealInfo, error) {
	return *new([]client.DealInfo), xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientListImports(p0 context.Context) ([]client.Import, error) {
	return s.Internal.ClientListImports(p0)
}

func (s *MarketClientNodeStub) ClientListImports(p0 context.Context) ([]client.Import, error) {
	return *new([]client.Import), xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientListRetrievals(p0 context.Context) ([]client.RetrievalInfo, error) {
	return s.Internal.ClientListRetrievals(p0)
}

func (s *MarketClientNodeStub) ClientListRetrievals(p0 context.Context) ([]client.RetrievalInfo, error) {
	return *new([]client.RetrievalInfo), xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientMinerQueryOffer(p0 context.Context, p1 address.Address, p2 cid.Cid, p3 *cid.Cid) (client.QueryOffer, error) {
	return s.Internal.ClientMinerQueryOffer(p0, p1, p2, p3)
}

func (s *MarketClientNodeStub) ClientMinerQueryOffer(p0 context.Context, p1 address.Address, p2 cid.Cid, p3 *cid.Cid) (client.QueryOffer, error) {
	return *new(client.QueryOffer), xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientQueryAsk(p0 context.Context, p1 peer.ID, p2 address.Address) (*storagemarket.StorageAsk, error) {
	return s.Internal.ClientQueryAsk(p0, p1, p2)
}

func (s *MarketClientNodeStub) ClientQueryAsk(p0 context.Context, p1 peer.ID, p2 address.Address) (*storagemarket.StorageAsk, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientRemoveImport(p0 context.Context, p1 imports.ID) error {
	return s.Internal.ClientRemoveImport(p0, p1)
}

func (s *MarketClientNodeStub) ClientRemoveImport(p0 context.Context, p1 imports.ID) error {
	return xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientRestartDataTransfer(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error {
	return s.Internal.ClientRestartDataTransfer(p0, p1, p2, p3)
}

func (s *MarketClientNodeStub) ClientRestartDataTransfer(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientRetrieve(p0 context.Context, p1 client.RetrievalOrder) (*client.RestrievalRes, error) {
	return s.Internal.ClientRetrieve(p0, p1)
}

func (s *MarketClientNodeStub) ClientRetrieve(p0 context.Context, p1 client.RetrievalOrder) (*client.RestrievalRes, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientRetrieveTryRestartInsufficientFunds(p0 context.Context, p1 address.Address) error {
	return s.Internal.ClientRetrieveTryRestartInsufficientFunds(p0, p1)
}

func (s *MarketClientNodeStub) ClientRetrieveTryRestartInsufficientFunds(p0 context.Context, p1 address.Address) error {
	return xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientRetrieveWait(p0 context.Context, p1 retrievalmarket.DealID) error {
	return s.Internal.ClientRetrieveWait(p0, p1)
}

func (s *MarketClientNodeStub) ClientRetrieveWait(p0 context.Context, p1 retrievalmarket.DealID) error {
	return xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientStartDeal(p0 context.Context, p1 *client.StartDealParams) (*cid.Cid, error) {
	return s.Internal.ClientStartDeal(p0, p1)
}

func (s *MarketClientNodeStub) ClientStartDeal(p0 context.Context, p1 *client.StartDealParams) (*cid.Cid, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) ClientStatelessDeal(p0 context.Context, p1 *client.StartDealParams) (*cid.Cid, error) {
	return s.Internal.ClientStatelessDeal(p0, p1)
}

func (s *MarketClientNodeStub) ClientStatelessDeal(p0 context.Context, p1 *client.StartDealParams) (*cid.Cid, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) DefaultAddress(p0 context.Context) (address.Address, error) {
	return s.Internal.DefaultAddress(p0)
}

func (s *MarketClientNodeStub) DefaultAddress(p0 context.Context) (address.Address, error) {
	return *new(address.Address), xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) MarketAddBalance(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) {
	return s.Internal.MarketAddBalance(p0, p1, p2, p3)
}

func (s *MarketClientNodeStub) MarketAddBalance(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) {
	return *new(cid.Cid), xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) MarketGetReserved(p0 context.Context, p1 address.Address) (vTypes.BigInt, error) {
	return s.Internal.MarketGetReserved(p0, p1)
}

func (s *MarketClientNodeStub) MarketGetReserved(p0 context.Context, p1 address.Address) (vTypes.BigInt, error) {
	return *new(vTypes.BigInt), xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) MarketReleaseFunds(p0 context.Context, p1 address.Address, p2 vTypes.BigInt) error {
	return s.Internal.MarketReleaseFunds(p0, p1, p2)
}

func (s *MarketClientNodeStub) MarketReleaseFunds(p0 context.Context, p1 address.Address, p2 vTypes.BigInt) error {
	return xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) MarketReserveFunds(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) {
	return s.Internal.MarketReserveFunds(p0, p1, p2, p3)
}

func (s *MarketClientNodeStub) MarketReserveFunds(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) {
	return *new(cid.Cid), xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) MarketWithdraw(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) {
	return s.Internal.MarketWithdraw(p0, p1, p2, p3)
}

func (s *MarketClientNodeStub) MarketWithdraw(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) {
	return *new(cid.Cid), xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) MessagerGetMessage(p0 context.Context, p1 cid.Cid) (*vTypes.Message, error) {
	return s.Internal.MessagerGetMessage(p0, p1)
}

func (s *MarketClientNodeStub) MessagerGetMessage(p0 context.Context, p1 cid.Cid) (*vTypes.Message, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) MessagerPushMessage(p0 context.Context, p1 *vTypes.Message, p2 *mTypes.MsgMeta) (cid.Cid, error) {
	return s.Internal.MessagerPushMessage(p0, p1, p2)
}

func (s *MarketClientNodeStub) MessagerPushMessage(p0 context.Context, p1 *vTypes.Message, p2 *mTypes.MsgMeta) (cid.Cid, error) {
	return *new(cid.Cid), xerrors.New("method not supported")
}

func (s *MarketClientNodeStruct) MessagerWaitMessage(p0 context.Context, p1 cid.Cid) (*apitypes.MsgLookup, error) {
	return s.Internal.MessagerWaitMessage(p0, p1)
}

func (s *MarketClientNodeStub) MessagerWaitMessage(p0 context.Context, p1 cid.Cid) (*apitypes.MsgLookup, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) ActorExist(p0 context.Context, p1 address.Address) (bool, error) {
	return s.Internal.ActorExist(p0, p1)
}

func (s *MarketFullNodeStub) ActorExist(p0 context.Context, p1 address.Address) (bool, error) {
	return false, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) ActorList(p0 context.Context) ([]types.User, error) {
	return s.Internal.ActorList(p0)
}

func (s *MarketFullNodeStub) ActorList(p0 context.Context) ([]types.User, error) {
	return *new([]types.User), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) ActorSectorSize(p0 context.Context, p1 address.Address) (abi.SectorSize, error) {
	return s.Internal.ActorSectorSize(p0, p1)
}

func (s *MarketFullNodeStub) ActorSectorSize(p0 context.Context, p1 address.Address) (abi.SectorSize, error) {
	return *new(abi.SectorSize), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) AssignUnPackedDeals(p0 context.Context, p1 address.Address, p2 abi.SectorSize, p3 *types.GetDealSpec) ([]*types.DealInfoIncludePath, error) {
	return s.Internal.AssignUnPackedDeals(p0, p1, p2, p3)
}

func (s *MarketFullNodeStub) AssignUnPackedDeals(p0 context.Context, p1 address.Address, p2 abi.SectorSize, p3 *types.GetDealSpec) ([]*types.DealInfoIncludePath, error) {
	return *new([]*types.DealInfoIncludePath), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DagstoreGC(p0 context.Context) ([]types.DagstoreShardResult, error) {
	return s.Internal.DagstoreGC(p0)
}

func (s *MarketFullNodeStub) DagstoreGC(p0 context.Context) ([]types.DagstoreShardResult, error) {
	return *new([]types.DagstoreShardResult), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DagstoreInitializeAll(p0 context.Context, p1 types.DagstoreInitializeAllParams) (<-chan types.DagstoreInitializeAllEvent, error) {
	return s.Internal.DagstoreInitializeAll(p0, p1)
}

func (s *MarketFullNodeStub) DagstoreInitializeAll(p0 context.Context, p1 types.DagstoreInitializeAllParams) (<-chan types.DagstoreInitializeAllEvent, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DagstoreInitializeShard(p0 context.Context, p1 string) error {
	return s.Internal.DagstoreInitializeShard(p0, p1)
}

func (s *MarketFullNodeStub) DagstoreInitializeShard(p0 context.Context, p1 string) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DagstoreListShards(p0 context.Context) ([]types.DagstoreShardInfo, error) {
	return s.Internal.DagstoreListShards(p0)
}

func (s *MarketFullNodeStub) DagstoreListShards(p0 context.Context) ([]types.DagstoreShardInfo, error) {
	return *new([]types.DagstoreShardInfo), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DagstoreRecoverShard(p0 context.Context, p1 string) error {
	return s.Internal.DagstoreRecoverShard(p0, p1)
}

func (s *MarketFullNodeStub) DagstoreRecoverShard(p0 context.Context, p1 string) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DealsConsiderOfflineRetrievalDeals(p0 context.Context) (bool, error) {
	return s.Internal.DealsConsiderOfflineRetrievalDeals(p0)
}

func (s *MarketFullNodeStub) DealsConsiderOfflineRetrievalDeals(p0 context.Context) (bool, error) {
	return false, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DealsConsiderOfflineStorageDeals(p0 context.Context) (bool, error) {
	return s.Internal.DealsConsiderOfflineStorageDeals(p0)
}

func (s *MarketFullNodeStub) DealsConsiderOfflineStorageDeals(p0 context.Context) (bool, error) {
	return false, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DealsConsiderOnlineRetrievalDeals(p0 context.Context) (bool, error) {
	return s.Internal.DealsConsiderOnlineRetrievalDeals(p0)
}

func (s *MarketFullNodeStub) DealsConsiderOnlineRetrievalDeals(p0 context.Context) (bool, error) {
	return false, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DealsConsiderOnlineStorageDeals(p0 context.Context) (bool, error) {
	return s.Internal.DealsConsiderOnlineStorageDeals(p0)
}

func (s *MarketFullNodeStub) DealsConsiderOnlineStorageDeals(p0 context.Context) (bool, error) {
	return false, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DealsConsiderUnverifiedStorageDeals(p0 context.Context) (bool, error) {
	return s.Internal.DealsConsiderUnverifiedStorageDeals(p0)
}

func (s *MarketFullNodeStub) DealsConsiderUnverifiedStorageDeals(p0 context.Context) (bool, error) {
	return false, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DealsConsiderVerifiedStorageDeals(p0 context.Context) (bool, error) {
	return s.Internal.DealsConsiderVerifiedStorageDeals(p0)
}

func (s *MarketFullNodeStub) DealsConsiderVerifiedStorageDeals(p0 context.Context) (bool, error) {
	return false, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DealsImportData(p0 context.Context, p1 cid.Cid, p2 string) error {
	return s.Internal.DealsImportData(p0, p1, p2)
}

func (s *MarketFullNodeStub) DealsImportData(p0 context.Context, p1 cid.Cid, p2 string) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DealsPieceCidBlocklist(p0 context.Context) ([]cid.Cid, error) {
	return s.Internal.DealsPieceCidBlocklist(p0)
}

func (s *MarketFullNodeStub) DealsPieceCidBlocklist(p0 context.Context) ([]cid.Cid, error) {
	return *new([]cid.Cid), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DealsSetConsiderOfflineRetrievalDeals(p0 context.Context, p1 bool) error {
	return s.Internal.DealsSetConsiderOfflineRetrievalDeals(p0, p1)
}

func (s *MarketFullNodeStub) DealsSetConsiderOfflineRetrievalDeals(p0 context.Context, p1 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DealsSetConsiderOfflineStorageDeals(p0 context.Context, p1 bool) error {
	return s.Internal.DealsSetConsiderOfflineStorageDeals(p0, p1)
}

func (s *MarketFullNodeStub) DealsSetConsiderOfflineStorageDeals(p0 context.Context, p1 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DealsSetConsiderOnlineRetrievalDeals(p0 context.Context, p1 bool) error {
	return s.Internal.DealsSetConsiderOnlineRetrievalDeals(p0, p1)
}

func (s *MarketFullNodeStub) DealsSetConsiderOnlineRetrievalDeals(p0 context.Context, p1 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DealsSetConsiderOnlineStorageDeals(p0 context.Context, p1 bool) error {
	return s.Internal.DealsSetConsiderOnlineStorageDeals(p0, p1)
}

func (s *MarketFullNodeStub) DealsSetConsiderOnlineStorageDeals(p0 context.Context, p1 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DealsSetConsiderUnverifiedStorageDeals(p0 context.Context, p1 bool) error {
	return s.Internal.DealsSetConsiderUnverifiedStorageDeals(p0, p1)
}

func (s *MarketFullNodeStub) DealsSetConsiderUnverifiedStorageDeals(p0 context.Context, p1 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DealsSetConsiderVerifiedStorageDeals(p0 context.Context, p1 bool) error {
	return s.Internal.DealsSetConsiderVerifiedStorageDeals(p0, p1)
}

func (s *MarketFullNodeStub) DealsSetConsiderVerifiedStorageDeals(p0 context.Context, p1 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) DealsSetPieceCidBlocklist(p0 context.Context, p1 []cid.Cid) error {
	return s.Internal.DealsSetPieceCidBlocklist(p0, p1)
}

func (s *MarketFullNodeStub) DealsSetPieceCidBlocklist(p0 context.Context, p1 []cid.Cid) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) GetDeals(p0 context.Context, p1 address.Address, p2 int, p3 int) ([]*types.DealInfo, error) {
	return s.Internal.GetDeals(p0, p1, p2, p3)
}

func (s *MarketFullNodeStub) GetDeals(p0 context.Context, p1 address.Address, p2 int, p3 int) ([]*types.DealInfo, error) {
	return *new([]*types.DealInfo), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) GetReadUrl(p0 context.Context, p1 string) (string, error) {
	return s.Internal.GetReadUrl(p0, p1)
}

func (s *MarketFullNodeStub) GetReadUrl(p0 context.Context, p1 string) (string, error) {
	return "", xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) GetUnPackedDeals(p0 context.Context, p1 address.Address, p2 *types.GetDealSpec) ([]*types.DealInfoIncludePath, error) {
	return s.Internal.GetUnPackedDeals(p0, p1, p2)
}

func (s *MarketFullNodeStub) GetUnPackedDeals(p0 context.Context, p1 address.Address, p2 *types.GetDealSpec) ([]*types.DealInfoIncludePath, error) {
	return *new([]*types.DealInfoIncludePath), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) GetWriteUrl(p0 context.Context, p1 string) (string, error) {
	return s.Internal.GetWriteUrl(p0, p1)
}

func (s *MarketFullNodeStub) GetWriteUrl(p0 context.Context, p1 string) (string, error) {
	return "", xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) ID(p0 context.Context) (peer.ID, error) {
	return s.Internal.ID(p0)
}

func (s *MarketFullNodeStub) ID(p0 context.Context) (peer.ID, error) {
	return *new(peer.ID), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) ListenMarketEvent(p0 context.Context, p1 *marketevent.MarketRegisterPolicy) (<-chan *types2.RequestEvent, error) {
	return s.Internal.ListenMarketEvent(p0, p1)
}

func (s *MarketFullNodeStub) ListenMarketEvent(p0 context.Context, p1 *marketevent.MarketRegisterPolicy) (<-chan *types2.RequestEvent, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarkDealsAsPacking(p0 context.Context, p1 address.Address, p2 []abi.DealID) error {
	return s.Internal.MarkDealsAsPacking(p0, p1, p2)
}

func (s *MarketFullNodeStub) MarkDealsAsPacking(p0 context.Context, p1 address.Address, p2 []abi.DealID) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketAddBalance(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) {
	return s.Internal.MarketAddBalance(p0, p1, p2, p3)
}

func (s *MarketFullNodeStub) MarketAddBalance(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) {
	return *new(cid.Cid), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketCancelDataTransfer(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error {
	return s.Internal.MarketCancelDataTransfer(p0, p1, p2, p3)
}

func (s *MarketFullNodeStub) MarketCancelDataTransfer(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketDataTransferUpdates(p0 context.Context) (<-chan types.DataTransferChannel, error) {
	return s.Internal.MarketDataTransferUpdates(p0)
}

func (s *MarketFullNodeStub) MarketDataTransferUpdates(p0 context.Context) (<-chan types.DataTransferChannel, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketGetAsk(p0 context.Context, p1 address.Address) (*storagemarket.SignedStorageAsk, error) {
	return s.Internal.MarketGetAsk(p0, p1)
}

func (s *MarketFullNodeStub) MarketGetAsk(p0 context.Context, p1 address.Address) (*storagemarket.SignedStorageAsk, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketGetDealUpdates(p0 context.Context) (<-chan storagemarket.MinerDeal, error) {
	return s.Internal.MarketGetDealUpdates(p0)
}

func (s *MarketFullNodeStub) MarketGetDealUpdates(p0 context.Context) (<-chan storagemarket.MinerDeal, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketGetReserved(p0 context.Context, p1 address.Address) (vTypes.BigInt, error) {
	return s.Internal.MarketGetReserved(p0, p1)
}

func (s *MarketFullNodeStub) MarketGetReserved(p0 context.Context, p1 address.Address) (vTypes.BigInt, error) {
	return *new(vTypes.BigInt), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketGetRetrievalAsk(p0 context.Context, p1 address.Address) (*retrievalmarket.Ask, error) {
	return s.Internal.MarketGetRetrievalAsk(p0, p1)
}

func (s *MarketFullNodeStub) MarketGetRetrievalAsk(p0 context.Context, p1 address.Address) (*retrievalmarket.Ask, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketImportDealData(p0 context.Context, p1 cid.Cid, p2 string) error {
	return s.Internal.MarketImportDealData(p0, p1, p2)
}

func (s *MarketFullNodeStub) MarketImportDealData(p0 context.Context, p1 cid.Cid, p2 string) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketListAsk(p0 context.Context) ([]*storagemarket.SignedStorageAsk, error) {
	return s.Internal.MarketListAsk(p0)
}

func (s *MarketFullNodeStub) MarketListAsk(p0 context.Context) ([]*storagemarket.SignedStorageAsk, error) {
	return *new([]*storagemarket.SignedStorageAsk), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketListDataTransfers(p0 context.Context) ([]types.DataTransferChannel, error) {
	return s.Internal.MarketListDataTransfers(p0)
}

func (s *MarketFullNodeStub) MarketListDataTransfers(p0 context.Context) ([]types.DataTransferChannel, error) {
	return *new([]types.DataTransferChannel), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketListDeals(p0 context.Context, p1 []address.Address) ([]types.MarketDeal, error) {
	return s.Internal.MarketListDeals(p0, p1)
}

func (s *MarketFullNodeStub) MarketListDeals(p0 context.Context, p1 []address.Address) ([]types.MarketDeal, error) {
	return *new([]types.MarketDeal), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketListIncompleteDeals(p0 context.Context, p1 address.Address) ([]storagemarket.MinerDeal, error) {
	return s.Internal.MarketListIncompleteDeals(p0, p1)
}

func (s *MarketFullNodeStub) MarketListIncompleteDeals(p0 context.Context, p1 address.Address) ([]storagemarket.MinerDeal, error) {
	return *new([]storagemarket.MinerDeal), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketListRetrievalAsk(p0 context.Context) ([]*types.RetrievalAsk, error) {
	return s.Internal.MarketListRetrievalAsk(p0)
}

func (s *MarketFullNodeStub) MarketListRetrievalAsk(p0 context.Context) ([]*types.RetrievalAsk, error) {
	return *new([]*types.RetrievalAsk), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketListRetrievalDeals(p0 context.Context, p1 address.Address) ([]types.ProviderDealState, error) {
	return s.Internal.MarketListRetrievalDeals(p0, p1)
}

func (s *MarketFullNodeStub) MarketListRetrievalDeals(p0 context.Context, p1 address.Address) ([]types.ProviderDealState, error) {
	return *new([]types.ProviderDealState), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketPendingDeals(p0 context.Context) ([]types.PendingDealInfo, error) {
	return s.Internal.MarketPendingDeals(p0)
}

func (s *MarketFullNodeStub) MarketPendingDeals(p0 context.Context) ([]types.PendingDealInfo, error) {
	return *new([]types.PendingDealInfo), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketPublishPendingDeals(p0 context.Context) error {
	return s.Internal.MarketPublishPendingDeals(p0)
}

func (s *MarketFullNodeStub) MarketPublishPendingDeals(p0 context.Context) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketReleaseFunds(p0 context.Context, p1 address.Address, p2 vTypes.BigInt) error {
	return s.Internal.MarketReleaseFunds(p0, p1, p2)
}

func (s *MarketFullNodeStub) MarketReleaseFunds(p0 context.Context, p1 address.Address, p2 vTypes.BigInt) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketReserveFunds(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) {
	return s.Internal.MarketReserveFunds(p0, p1, p2, p3)
}

func (s *MarketFullNodeStub) MarketReserveFunds(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) {
	return *new(cid.Cid), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketRestartDataTransfer(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error {
	return s.Internal.MarketRestartDataTransfer(p0, p1, p2, p3)
}

func (s *MarketFullNodeStub) MarketRestartDataTransfer(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketSetAsk(p0 context.Context, p1 address.Address, p2 vTypes.BigInt, p3 vTypes.BigInt, p4 abi.ChainEpoch, p5 abi.PaddedPieceSize, p6 abi.PaddedPieceSize) error {
	return s.Internal.MarketSetAsk(p0, p1, p2, p3, p4, p5, p6)
}

func (s *MarketFullNodeStub) MarketSetAsk(p0 context.Context, p1 address.Address, p2 vTypes.BigInt, p3 vTypes.BigInt, p4 abi.ChainEpoch, p5 abi.PaddedPieceSize, p6 abi.PaddedPieceSize) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketSetRetrievalAsk(p0 context.Context, p1 address.Address, p2 *retrievalmarket.Ask) error {
	return s.Internal.MarketSetRetrievalAsk(p0, p1, p2)
}

func (s *MarketFullNodeStub) MarketSetRetrievalAsk(p0 context.Context, p1 address.Address, p2 *retrievalmarket.Ask) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MarketWithdraw(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) {
	return s.Internal.MarketWithdraw(p0, p1, p2, p3)
}

func (s *MarketFullNodeStub) MarketWithdraw(p0 context.Context, p1 address.Address, p2 address.Address, p3 vTypes.BigInt) (cid.Cid, error) {
	return *new(cid.Cid), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MessagerGetMessage(p0 context.Context, p1 cid.Cid) (*vTypes.Message, error) {
	return s.Internal.MessagerGetMessage(p0, p1)
}

func (s *MarketFullNodeStub) MessagerGetMessage(p0 context.Context, p1 cid.Cid) (*vTypes.Message, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MessagerPushMessage(p0 context.Context, p1 *vTypes.Message, p2 *mTypes.MsgMeta) (cid.Cid, error) {
	return s.Internal.MessagerPushMessage(p0, p1, p2)
}

func (s *MarketFullNodeStub) MessagerPushMessage(p0 context.Context, p1 *vTypes.Message, p2 *mTypes.MsgMeta) (cid.Cid, error) {
	return *new(cid.Cid), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) MessagerWaitMessage(p0 context.Context, p1 cid.Cid) (*apitypes.MsgLookup, error) {
	return s.Internal.MessagerWaitMessage(p0, p1)
}

func (s *MarketFullNodeStub) MessagerWaitMessage(p0 context.Context, p1 cid.Cid) (*apitypes.MsgLookup, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) NetAddrsListen(p0 context.Context) (peer.AddrInfo, error) {
	return s.Internal.NetAddrsListen(p0)
}

func (s *MarketFullNodeStub) NetAddrsListen(p0 context.Context) (peer.AddrInfo, error) {
	return *new(peer.AddrInfo), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) PaychVoucherList(p0 context.Context, p1 address.Address) ([]*paych.SignedVoucher, error) {
	return s.Internal.PaychVoucherList(p0, p1)
}

func (s *MarketFullNodeStub) PaychVoucherList(p0 context.Context, p1 address.Address) ([]*paych.SignedVoucher, error) {
	return *new([]*paych.SignedVoucher), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) PiecesGetCIDInfo(p0 context.Context, p1 cid.Cid) (*piecestore.CIDInfo, error) {
	return s.Internal.PiecesGetCIDInfo(p0, p1)
}

func (s *MarketFullNodeStub) PiecesGetCIDInfo(p0 context.Context, p1 cid.Cid) (*piecestore.CIDInfo, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) PiecesGetPieceInfo(p0 context.Context, p1 cid.Cid) (*piecestore.PieceInfo, error) {
	return s.Internal.PiecesGetPieceInfo(p0, p1)
}

func (s *MarketFullNodeStub) PiecesGetPieceInfo(p0 context.Context, p1 cid.Cid) (*piecestore.PieceInfo, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) PiecesListCidInfos(p0 context.Context) ([]cid.Cid, error) {
	return s.Internal.PiecesListCidInfos(p0)
}

func (s *MarketFullNodeStub) PiecesListCidInfos(p0 context.Context) ([]cid.Cid, error) {
	return *new([]cid.Cid), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) PiecesListPieces(p0 context.Context) ([]cid.Cid, error) {
	return s.Internal.PiecesListPieces(p0)
}

func (s *MarketFullNodeStub) PiecesListPieces(p0 context.Context) ([]cid.Cid, error) {
	return *new([]cid.Cid), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) ResponseMarketEvent(p0 context.Context, p1 *types2.ResponseEvent) error {
	return s.Internal.ResponseMarketEvent(p0, p1)
}

func (s *MarketFullNodeStub) ResponseMarketEvent(p0 context.Context, p1 *types2.ResponseEvent) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) SectorGetSealDelay(p0 context.Context) (time.Duration, error) {
	return s.Internal.SectorGetSealDelay(p0)
}

func (s *MarketFullNodeStub) SectorGetSealDelay(p0 context.Context) (time.Duration, error) {
	return *new(time.Duration), xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) SectorSetExpectedSealDuration(p0 context.Context, p1 time.Duration) error {
	return s.Internal.SectorSetExpectedSealDuration(p0, p1)
}

func (s *MarketFullNodeStub) SectorSetExpectedSealDuration(p0 context.Context, p1 time.Duration) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) UpdateDealOnPacking(p0 context.Context, p1 address.Address, p2 abi.DealID, p3 abi.SectorNumber, p4 abi.PaddedPieceSize) error {
	return s.Internal.UpdateDealOnPacking(p0, p1, p2, p3, p4)
}

func (s *MarketFullNodeStub) UpdateDealOnPacking(p0 context.Context, p1 address.Address, p2 abi.DealID, p3 abi.SectorNumber, p4 abi.PaddedPieceSize) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) UpdateDealStatus(p0 context.Context, p1 address.Address, p2 abi.DealID, p3 string) error {
	return s.Internal.UpdateDealStatus(p0, p1, p2, p3)
}

func (s *MarketFullNodeStub) UpdateDealStatus(p0 context.Context, p1 address.Address, p2 abi.DealID, p3 string) error {
	return xerrors.New("method not supported")
}

func (s *MarketFullNodeStruct) UpdateStorageDealStatus(p0 context.Context, p1 cid.Cid, p2 storagemarket.StorageDealStatus) error {
	return s.Internal.UpdateStorageDealStatus(p0, p1, p2)
}

func (s *MarketFullNodeStub) UpdateStorageDealStatus(p0 context.Context, p1 cid.Cid, p2 storagemarket.StorageDealStatus) error {
	return xerrors.New("method not supported")
}

var _ MarketClientNode = new(MarketClientNodeStruct)
var _ MarketFullNode = new(MarketFullNodeStruct)
